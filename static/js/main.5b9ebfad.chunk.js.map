{"version":3,"sources":["serviceWorker.js","App.js","index.js"],"names":["deferredPrompt","App","react_default","a","createElement","className","onClick","console","log","player","document","getElementById","navigator","mediaDevices","getUserMedia","video","then","stream","srcObject","id","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","addToHomeScreen","style","display","prompt","userChoice","choiceResult","outcome","addEventListener","e","preventDefault","a2hsBtn","showAddToHomeScreen","ReactDOM","render","src_App_0","URL","process","href","origin","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"8KAwIIA,kCC3GWC,cA1BH,WAgBV,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,UAAQE,QAlBI,WACdC,QAAQC,IAAI,qBAEZ,IAAMC,EAASC,SAASC,eAAe,UAEvCJ,QAAQC,IAAI,sBAAuBC,GAMnCG,UAAUC,aAAaC,aAJH,CAClBC,OAAO,IAGwCC,KAAK,SAAAC,GACpDR,EAAOS,UAAYD,MAMnB,eACAf,EAAAC,EAAAC,cAAA,OAAKe,GAAG,WACRjB,EAAAC,EAAAC,cAAA,OAAKe,GAAG,sBAAR,qCDZAC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BhB,UAAUiB,cACPC,SAASH,GACTX,KAAK,SAAAe,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfxB,UAAUiB,cAAcQ,YAI1B9B,QAAQC,IACN,iHAKEoB,GAAUA,EAAOU,UACnBV,EAAOU,SAASP,KAMlBxB,QAAQC,IAAI,sCAGRoB,GAAUA,EAAOW,WACnBX,EAAOW,UAAUR,UAO5BS,MAAM,SAAAC,GACLlC,QAAQkC,MAAM,4CAA6CA,KAwDjE,SAASC,IACOhC,SAASC,eAAe,sBAC9BgC,MAAMC,QAAU,OACxB5C,EAAe6C,SACf7C,EAAe8C,WAAW9B,KAAK,SAAS+B,GACT,aAAzBA,EAAaC,QACfzC,QAAQC,IAAI,iCAEZD,QAAQC,IAAI,kCAEdR,EAAiB,OAxBrBsB,OAAO2B,iBAAiB,sBAAuB,SAAAC,GAE7CA,EAAEC,iBAEFnD,EAAiBkD,EAInB,WACE,IAAIE,EAAU1C,SAASC,eAAe,sBACtCyC,EAAQT,MAAMC,QAAU,QACxBQ,EAAQH,iBAAiB,QAASP,GANlCW,KEzIFC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAAS9C,SAASC,eAAe,SFgB1C,SAAkBiB,GACvB,GAA6C,kBAAmBhB,UAAW,CAGzE,GADkB,IAAI6C,IAAIC,sCAAwBpC,OAAOC,SAASoC,MACpDC,SAAWtC,OAAOC,SAASqC,OAIvC,OAGFtC,OAAO2B,iBAAiB,OAAQ,WAC9B,IAAMtB,EAAK,GAAAkC,OAAMH,sCAAN,sBAEPtC,GAgEV,SAAiCO,EAAOC,GAEtCkC,MAAMnC,GACHX,KAAK,SAAA+C,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5CxD,UAAUiB,cAAcwC,MAAMrD,KAAK,SAAAe,GACjCA,EAAauC,aAAatD,KAAK,WAC7BM,OAAOC,SAASgD,aAKpB7C,EAAgBC,EAAOC,KAG1BY,MAAM,WACLjC,QAAQC,IACN,mEArFAgE,CAAwB7C,EAAOC,GAI/BhB,UAAUiB,cAAcwC,MAAMrD,KAAK,WACjCT,QAAQC,IACN,gHAMJkB,EAAgBC,EAAOC,MEtC/BC","file":"static/js/main.5b9ebfad.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n\nlet deferredPrompt;\n\nwindow.addEventListener(\"beforeinstallprompt\", e => {\n  // Prevent Chrome 67 and earlier from automatically showing the prompt\n  e.preventDefault();\n  // Stash the event so it can be triggered later.\n  deferredPrompt = e;\n  showAddToHomeScreen();\n});\n\nfunction showAddToHomeScreen() {\n  let a2hsBtn = document.getElementById(\"app-install-banner\");\n  a2hsBtn.style.display = \"block\";\n  a2hsBtn.addEventListener(\"click\", addToHomeScreen);\n}\n\nfunction addToHomeScreen() {\n  let a2hsBtn = document.getElementById(\"app-install-banner\"); // hide our user interface that shows our A2HS button\n  a2hsBtn.style.display = \"none\"; // Show the prompt\n  deferredPrompt.prompt(); // Wait for the user to respond to the prompt\n  deferredPrompt.userChoice.then(function(choiceResult) {\n    if (choiceResult.outcome === \"accepted\") {\n      console.log(\"User accepted the A2HS prompt\");\n    } else {\n      console.log(\"User dismissed the A2HS prompt\");\n    }\n    deferredPrompt = null;\n  });\n}\n","import React from \"react\";\nimport \"./App.css\";\n\nconst App = () => {\n  const openCam = () => {\n    console.log(\"triggering camera\");\n\n    const player = document.getElementById(\"player\");\n\n    console.log(\"got the player node\", player);\n\n    const constraints = {\n      video: true\n    };\n\n    navigator.mediaDevices.getUserMedia(constraints).then(stream => {\n      player.srcObject = stream;\n    });\n  };\n  return (\n    <div className=\"App\">\n      <h2>Hello World</h2>\n      <button onClick={openCam}>Open Camera</button>\n      <div id=\"player\" />\n      <div id=\"app-install-banner\">Click here to install this app</div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();\n\n"],"sourceRoot":""}